import numpy as np
from random import random, randint

# note: "node" refers to a position on the maze
# note: the value of a node is the cost that it takes to get there, so lower cost is better

def grid_print(grid):
    for i in grid:
        print(i)


def make_maze(x: int, y: int, value_range: tuple):
    maze = [[0 for i in range(x)] for j in range(y)]  # initialising array of zeros

    # adding values to the array
    for i in range(len(maze)):
        for j in range(len(maze[i])):
            maze[i][j] = randint(value_range[0], value_range[1])  # adding cost values

    return maze


maze = make_maze(x=10, y=10, value_range=(0, 9))

grid_print(maze)


def a_star(maze, starting_position: tuple, goal_position: tuple):
    open = [starting_position]
    closed = []

    while len(open) > 0:  # while there are still opened nodes
        value_dict = {pos: maze[pos[0]][pos[1]] for pos in opened}  # the values of each position on the open list
        current_node = min(value_dict, key=value_dict.get)  # get the position with the lowest value

        if current_node == goal_position:  # if the current node is the destination, end
            return "DONE!!!     Change this to something that returns the path"

            """Note: Change this to something that returns the path"""

        open.remove(current_node)  # node has been "explored", so remove it from the open list
